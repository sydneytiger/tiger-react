import { ReactElementType } from 'shared/ReactTypes';
import { FiberNode } from './fiber';
import { UpdateQueue, processUpdateQueue } from './updateQueue';
import { HostComponent, HostRoot, HostText } from './workTags';
import { mountChildFibers, reconcileChildFibers } from './childFiber';

/**
 * ‰æãÂ≠ê:
 * <A><B/></A>
 * ÂΩìËøõÂÖ•AÁöÑbeginWorkÊó∂, ÈÄöËøáÂØπÊØîBÁöÑcurrent fiberNodeÂíåBÁöÑ reactElement
 * ÁîüÊàêBÂØπÂ∫îÁöÑwip fiberNode
 */

//! ÈÄíÂΩí‰∏≠ÁöÑÈÄíÈò∂ÊÆµ
export const beginWork = (wip: FiberNode) => {
	// * will eventually return child fiber node
	switch (wip.tag) {
		case HostRoot:
			return updateHostRoot(wip);
		case HostComponent:
			return updateHostComponent(wip);
		case HostText:
			// * HostText Ê≤°ÊúâÂ≠êËäÇÁÇπ(leaf node) ÊâÄ‰ª•Ê≤°ÊúâbeginWorkÈÄªËæë
			return null;
		default:
			if (__DEV__) {
				console.warn('üêØ ~ beginWork Êú™ÂÆûÁé∞ÁöÑÁ±ªÂûã tag');
			}
			return null;
	}
};

/**
 * * HostRootÁöÑbeginWork Â∑•‰ΩúÊµÅÁ®ã
 * * 1. ËÆ°ÁÆóÁä∂ÊÄÅÊúÄÊñ∞ÂÄº
 * * 2. ÂàõÈÄ†Â≠êfiberNode
 */
const updateHostRoot = (wip: FiberNode) => {
	const baseState = wip.memoizedState;
	const updateQueue = wip.updateQueue as UpdateQueue<Element>;
	const pending = updateQueue.shared.pending;
	updateQueue.shared.pending = null;

	// * ËÆ°ÁÆóÁä∂ÊÄÅÊúÄÊñ∞ÂÄº
	const { memoizedState } = processUpdateQueue(baseState, pending);
	wip.memoizedState = memoizedState;

	const nextChildren = wip.memoizedState;
	reconcileChildren(wip, nextChildren);
	return wip.child;
};

/**
 * * HostComponentÁöÑbeginWorkÂ∑•‰ΩúÊµÅÁ®ã
 * * 1.ÂàõÈÄ†Â≠êfiberNode
 * ! HostComponentÈáåÊó†Ê≥ïËß¶ÂèëÊõ¥Êñ∞
 */
const updateHostComponent = (wip: FiberNode) => {
	// * fiberNode.pendingPropsÂíåreactElement.pendingProps‰∏ÄÊ†∑
	const nextProps = wip.pendingProps;
	const nextChildren = nextProps.children;
	reconcileChildren(wip, nextChildren);
	return wip.child;
};

/**
 * * ÈÄöËøáÂØπÊØîBÁöÑcurrent fiberNodeÂíåBÁöÑ reactElement
 */
const reconcileChildren = (wip: FiberNode, children?: ReactElementType) => {
	const current = wip.alternate;

	if (current != null) {
		// update fiber node
		wip.child = reconcileChildFibers(wip, current?.child, children);
	} else {
		// mount fiber node
		wip.child = mountChildFibers(wip, null, children);
	}
};
